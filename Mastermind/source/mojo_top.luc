module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  flipper flipper;
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_conditioner btn1(#MIN_DELAY(40));
    button_conditioner btn2(#MIN_DELAY(40));
    button_conditioner btn3(#MIN_DELAY(40));
    button_conditioner btn4(#MIN_DELAY(40));
    edge_detector btn1_edge(#RISE(1), #FALL(0));
    edge_detector btn2_edge(#RISE(1), #FALL(0));
    edge_detector btn3_edge(#RISE(1), #FALL(0));
    edge_detector btn4_edge(#RISE(1), #FALL(0));
    .rst(rst) {
      //lfsr lfsr;
      //checker checker;
      dff usr_input[16];
    }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    btn1.in = io_button[1];
    btn1_edge.in = btn1.out;
    btn2.in = io_button[2];
    btn2_edge.in = btn2.out;
    btn3.in = io_button[3];
    btn3_edge.in = btn3.out;
    btn4.in = io_button[4];
    btn4_edge.in = btn4.out;
    
    flipper.usr_input = usr_input.q;
    flipper.mode = 1;
    flipper.instr = c{btn1_edge.out, btn2_edge.out, btn3_edge.out, btn4_edge.out};
    if (btn1_edge.out || btn2_edge.out || btn3_edge.out || btn4_edge.out) {
      usr_input.d = flipper.out;                
    }
    io_led[0] = usr_input.q[7:0];
    io_led[1] = usr_input.q[15:8];
  }
}