/*
 * This module is used to compare the user input and answer.
 * out1: Correct color and position
 * out2: Correct color but wrong position
 */
module checker (
    input clk,            // clock
    input rst,            // reset
    input usr_input[8],   // user input(Each 2 bits correspond to a color/values)
    input ans[8],         // answer of the game
    output out1[3],       // number of correct match for both color and position
    output out2[3],       // number of correct match for color only
    output read[1]        // flag for finish the comparison operation
  ) {
  
  .clk(clk) {
    .rst(rst) {
      dff copy_usr_input[16];    // Store a copy of user input
      dff copy_ans[16];          // Store a copy of game answer
      dff mask[16];              // Used to select the bits(position) we want to compare
      dff bulls[3];              // Counter for correct color and position
      dff cows[3];               // Counter for correct color
      dff count1[3];             // Used as the for loop counter
      dff count2[3];             // Used as the for loop counter
      dff btemp[16];             // Store a temporary copy_ans when calculate the cows
      fsm state = {INIT, BULLS, COWS1, COWS2, SHF1, SHF2, DONE};
    }
  }
  always {
    
    // Set the default value and connect the output to the corresponding storage(dff) output
    read = 0;
    out1 = bulls.q;
    out2 = cows.q;

    case(state.q) {
      state.INIT:
        bulls.d = 0;
        cows.d = 0;
        // i = 0
        count1.d = 0;
        // Convert the 8bits input to 16bits so that later we can identify which bits(position) we have compared.
        // It is not necessary to be 16bits but minimum must be 12bits.
        // Initial input: 11 11 11 11
        // Converted input: 0011 0011 0011 0011
        // If we found perfect match(color&position): 0011 1111 0011 0011
        copy_usr_input.d = c{2b00, usr_input[7:6], 2b00, usr_input[5:4], 2b00, usr_input[3:2], 2b00, usr_input[1:0]};
        copy_ans.d = c{2b00, ans[7:6], 2b00, ans[5:4], 2b00, ans[3:2], 2b00, ans[1:0]};
        mask.d = 16hf;
        state.d = state.BULLS;
      state.BULLS:
        if (count1.q > 3) {  // for loop condition check, i < 4
          state.d = state.COWS1;
          // i = 0
          count1.d = 0;
        } else {
          // if the copy_usr_input == copy_ans at that position selected
          // using mask, increase the bulls counter
          if ((copy_usr_input.q & mask.q) == (copy_ans.q & mask.q)) {
            bulls.d = bulls.q + 1;
            // Mark the position that match so that later we will not check in
            // when calculate the cows number
            copy_usr_input.d = copy_usr_input.q | mask.q;
            copy_ans.d = copy_ans.q | mask.q;
          }
          // Increase the for loop counter: i++
          count1.d = count1.q + 1;
          // Shift the mask to left to select the next position we want to check
          mask.d = mask.q << 4;
        }
      state.COWS1:
        if (count1.q > 3) {  // for loop condition check, i < 4
          state.d = state.DONE;
        } else {
          // Check if the last position of the copy_usr_input has been marked
          // during the bulls calculation
          // if it has not marked, go to state.COW2
          if (copy_usr_input.q[3:0] != 4hf) {
            state.d = state.COWS2;
            // j = 0
            count2.d = 0;
            // Store a copy of the copy_ans as we will do shifting on it
            btemp.d = copy_ans.q;
            // Used to select the position of input we want to compare
            mask.d = 16hf;
          } else {
            // Shift the copy_usr_input to check the next position
            state.d = state.SHF1;
          }
        }
        // i++
        count1.d = count1.q + 1;
      state.SHF1:
        // This is used to move to the next position of the user input
        copy_usr_input.d = copy_usr_input.q >> 4;
        state.d = state.COWS1;        
      state.COWS2:
        if (count2.q > 3) {  // for loop condition check, i < 4
          state.d = state.SHF1;
        } else {
          // Compare user input and answer color(last position)
          if (btemp.q[3:0] == copy_usr_input.q[3:0]) {
            cows.d = cows.q +1;
            // Mark the answer that has the same color with 
            // user input at different position
            copy_ans.d = copy_ans.q | mask.q;
            state.d = state.COWS1;
          } else {
            state.d = state.SHF2;
          }
          // j++
          count2.d = count2.q + 1;
          // Shift the mask to left to select the next position we want to check 
          mask.d = mask.q << 4;
        }
      state.SHF2:
        // This is used to compare each answer color with the user input(current position)
        btemp.d = btemp.q >> 4;
        state.d = state.COWS2;
      state.DONE:
        read = 1;
    }
  }
}
