/*
 * This module is used to manage the board state for both the user entry and feedback entry.
 * This module is connected to display_manager to display all the entry in LED.
 */
module board_manager (
    input clk,                   // clock
    input rst,                   // reset
    input start[1],              // Flag for starting the game(read signal from the random_generator)
    input end[2],                // Flag for determine the game result
    input done[1],               // Flag for done checking the user entry
    input ans[16],               // Random generated answer from the random_generator 
    input row_entry[16],         // User input
    input feedback_entry[16],    // Checker result
    output ans_ref[16],          // Pass the stored answer to the checker
    output board_out[8][16],     // Board state
    output feedback_out[8][16]   // Feedback state
  ) {

  const WIN = 2b01;
  const LOSS = 2b10;

  .clk(clk) {
    .rst(rst) {
      dff row_idx[3];
      dff board[8][16];
      dff feedback[8][16];
      dff ans_storage[16];
      dff winboard[8][16];
      dff lossboard[8][16];
      fsm state = {INIT, PLAY, WIN, LOSS};
    } 
  }
  always {
    // Connect all the output
    ans_ref = ans_storage.q;
    board_out = board.q;
    feedback_out = feedback.q;
    
    // Save the user entry and 
    board.d[row_idx.q] = row_entry;
    feedback.d[row_idx.q] = feedback_entry;
    
    case (state.q) {
      state.INIT:
        if (start) {  // When the random_generator data is ready
          state.d = state.PLAY;
          ans_storage.d = ans;      // Save the answer to the storage
          winboard.d = 8x{{16b0}};  // All green
          lossboard.d = 8x{{ans}};  // All answer
        }
      state.PLAY:
        if (done) {  // When the checker done checking      
          row_idx.d = row_idx.q + 1;
        }

        if (end == WIN) {
          state.d = state.WIN;
        } else if (end == LOSS) {
          state.d = state.LOSS; 
        }
      state.WIN:
        board.d = winboard.q;  // Output the winboard
      state.LOSS:
        board.d = lossboard.q; // Output the lossboard
    }
  }
}
