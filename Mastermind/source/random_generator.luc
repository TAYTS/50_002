/*
 * Linear Feedback Shift Register
 * This is used to generate 16bits random number
 */
module random_generator (
    input clk,          // clock
    input rst,          // reset
    input stop[1],      // Signal to stop the FSM looping    
    output ans[16],     // Answer of the game
    output init[16],    // Initial row configuration
    output read[1]      // Flag to state the random number is ready to read
  ) {

  .clk(clk) {
    .rst(rst) {
      dff ans_lfsr[16];      // Store the random game answer
      dff init_lfsr[16];     // Store the random initial row value
      dff ans_bit[16];       // Store the output of the x16+x14+x13+x11
      dff init_bit[16];      // Store the output of the x16+x14+x13+x11
      fsm state = {INIT, PROCESS, DONE};
    } 
  }
  const MASK = 4x{4b0011};
  
  always {
    // Connect the output signal to the respective storage(dff)
    ans = 0;
    init = 0;

    read = 0;
    case(state.q) {
      state.INIT:
        ans_lfsr.d = 16hF1C4;    // Seed value for generate game answer
        init_lfsr.d = 16hE31B;   // Seed value for generate initial row configuration
        state.d = state.PROCESS;
      state.PROCESS:
        // Generate random bit for game answer
        ans_bit.d = ((ans_lfsr.q >> 0) ^ (ans_lfsr.q >> 2) ^ (ans_lfsr.q >> 3) ^ (ans_lfsr.q >> 5)) & 1;
        ans_lfsr.d = (ans_lfsr.q >> 1) | (ans_bit.q << 15);
        // Generate random bit for initial row configuration
        init_bit.d = ((init_lfsr.q >> 0) ^ (init_lfsr.q >> 2) ^ (init_lfsr.q >> 3) ^ (init_lfsr.q >> 5)) & 1;
        init_lfsr.d = (init_lfsr.q >> 1) | (init_bit.q << 15);
        if (stop)
          state.d = state.DONE;
      state.DONE:
          // Mask the outputs(Select the last 2 bits of each 4 bits window)
          // 0011 0011 0011 0011
          ans = ans_lfsr.q & MASK;
          init = init_lfsr.q & MASK;
          read = 1;
    }

  }
}
