module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    output a,
    output b,
    output c,
    input raw_s,
    input raw_c
  ) {
  
  sig rst;    // reset signal

  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    pipeline sync_cout(#DEPTH(4));
    pipeline sync_sum(#DEPTH(4));       
    
    .rst(rst) {
      display_status seg;
      dff ctr[3];
      dff delay_count[$clog2(50000000 * 20 / 1000)];
      dff delay_sum[$clog2(50000000 * 20 / 1000)];
      dff mode[1];
      adder_fsm adder_fsm;
    }
  }

  test_cases test_cases;
  manual_checker manual_checker;

  always {
    
    sync_cout.in = raw_c;
    sync_sum.in = raw_s;
    
    if (!&delay_count.q)
      delay_count.d = delay_count.q + 1;
    
    if (!&delay_sum.q)
      delay_sum.d = delay_sum.q + 1;
    
    if (!sync_cout.out)
      delay_count.d = 0;
    
    if (!sync_sum.out)
      delay_sum.d = 0;
    
    //// Pre-set value for unused pin-out ////
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    //////////////////////////////////////////

    
    //// Define the testing and display mode ////
    //// 1: Auto, 0: Manual                  ////
    mode.d = io_dip[2][7];
    /////////////////////////////////////////////
    
    //// Define the input for FSM module  and output of pinout ////
    /////////////////////////////////////////
    //// increment the test_cases using counter ////
    test_cases.idx = ctr.q;
    ////////////////////////////////////////////////
    //// mode: 1 => use the automated test_cases //////////
    if (mode.q) {
      //// pinout output ////
      a = test_cases.values[0];
      b = test_cases.values[1];
      c = test_cases.values[2];
      //// adder_fsm input ////
      adder_fsm.a = test_cases.values[0];
      adder_fsm.b = test_cases.values[1];
      adder_fsm.c = test_cases.values[2];
    }
    //// mode: 0 => manually toggle the group 1 switch ////
    else {
      //// pinout output ////
      a = io_dip[0][0];
      b = io_dip[0][1];
      c = io_dip[0][2];
      //// adder_fsm input ////
      adder_fsm.a = 1b0;
      adder_fsm.b = 1b0;
      adder_fsm.c = 1b0;  
    }
    ///////////////////////////////////////////////////////

    //// Provide actual and raw data for adder_fsm checker ////
    
    if (mode.q) {
      adder_fsm.raw = c{raw_c, raw_s};
      adder_fsm.expect = test_cases.values[4:3];
      manual_checker.raw = 2b0;
      manual_checker.expect = 2b0;
    } else {
      adder_fsm.raw = 2b0;
      adder_fsm.expect = 2b0;

      manual_checker.raw = c{raw_c, raw_s};
      if ((io_dip[0][0] + io_dip[0][1] + io_dip[0][2]) == 3) {
        manual_checker.expect = 2b11;
      } else if ((io_dip[0][0] + io_dip[0][1] + io_dip[0][2]) == 2) {
        manual_checker.expect = 2b10;
      } else if ((io_dip[0][0] + io_dip[0][1] + io_dip[0][2]) == 1) {
        manual_checker.expect = 2b01;
      } else {
        manual_checker.expect = 2b00;
      }
    }
    //////////////////////////////////////////////////////////

    
    //// Display out comparison (FAIL) ////
    if (adder_fsm.pass == 2b00 || manual_checker.pass == 2b00) {
      if (mode.q) {
        // group 1 LED: inputs for the full bit adder
        io_led[0] = adder_fsm.input_ref;
      
        // group 2 LED: expected output
        io_led[1] = adder_fsm.ans_ref;
      
        // group 3 LED: actual output
        io_led[2] = adder_fsm.err_ref;
        //led = adder_fsm.pass;
      } else {
        // group 1 LED: inputs for the full bit adder
        io_led[0] = c{io_dip[0][2], io_dip[0][1], io_dip[0][0]};
      
        // group 2 LED: expected output
        io_led[1] = manual_checker.ans_ref;
      
        // group 3 LED: actual output
        io_led[2] = c{raw_c, raw_s};
        //led = adder_fsm.pass;
      }
    }
    else {
      // if everthing pass, NO LED
      io_led = 3x{{8h00}};
    }
    ///////////////////////////////////////
    
    if (mode.q) {
      if (adder_fsm.pass == 2b00) {
        seg.status = adder_fsm.pass;
      } else if (adder_fsm.pass == 2b10) {
        seg.status = adder_fsm.pass;
      } else {
        if (io_button[1])
          ctr.d = 3b0;
        if (ctr.q < 7) {
          ctr.d = ctr.q + 1b1;
          seg.status = 2b10;
        } else
          seg.status = adder_fsm.pass;
      }
    } else {
      seg.status = manual_checker.pass; 
    }
    
    io_seg = ~seg.seg;
    io_sel = ~seg.sel;    
  }
}