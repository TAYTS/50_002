module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    output a,
    output b,
    output c,
    input raw_s,
    input raw_c
  ) {
  
  sig rst;    // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    .rst(rst) {
      display_status seg;
      counter ctr (#SIZE(3), #DIV(25));
      dff mode[1];
      //multi_seven_seg seg;
    }
    
    .rst(io_button[1]) {
      adder_fsm adder_fsm;
    }
  }
  test_cases test_cases;

  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    
    // define the testing mode
    mode.d = io_dip[2][7];
          
    test_cases.idx = ctr.value;
    // a, b input for adder_fsm depends on the testing mode
    // mode: 1 => use the automated test_cases
    if (mode.q == 1b1) {
      a = test_cases.values[1];
      b = test_cases.values[0];
      adder_fsm.a = test_cases.values[1];
      adder_fsm.b = test_cases.values[0];
    }
    // mode: 0 => manually toggle the group 1 switch
    else {
      a = io_dip[0][0];
      b = io_dip[0][1];
      adder_fsm.a = io_dip[0][0];
      adder_fsm.b = io_dip[0][1];  
    }
    c = adder_fsm.cin;
    

    adder_fsm.raw_s = raw_s;
    adder_fsm.raw_c = raw_c;
 
    seg.mode = io_dip[2][7];
    seg.status = io_dip[2][7];
    //seg.values = {test_cases.values[1], test_cases.values[0], adder_fsm.result, adder_fsm.check}; 
    io_seg = ~seg.seg;
    io_sel = ~seg.sel;
  }
}