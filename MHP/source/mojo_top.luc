module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    output a,
    output b,
    output c,
    input raw_s,
    input raw_c
  ) {
  
  sig rst;    // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    pipeline raw_cout(#DEPTH(2));
    pipeline raw_sum(#DEPTH(2));

    edge_detector raise_a(#RISE(1), #FALL(1));
    edge_detector raise_b(#RISE(1), #FALL(1));
    edge_detector raise_c(#RISE(1), #FALL(1));
    
    .rst(rst) {
      display_status seg;
      dff ctr[3];
      dff mode[1];
      //adder_fsm adder_fsm;
    }
    .rst(io_button[1]) {
      adder_fsm adder_fsm; 
    }
  }
  test_cases test_cases;
  always {
    raw_cout.in = raw_c;
    raw_sum.in = raw_s;
    
    raise_a.in = io_dip[0][0];
    raise_b.in = io_dip[0][1];
    raise_c.in = io_dip[0][2];
    
    //// Pre-set value for unused pin-out ////
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    //////////////////////////////////////////

    
    //// Define the testing and display mode ////
    //// 1: Auto, 0: Manual                  ////
    mode.d = io_dip[2][7];
    /////////////////////////////////////////////
    
    //// Define the input for FSM module  and output of pinout ////
    /////////////////////////////////////////
    //// increment the test_cases using counter ////
    test_cases.idx = ctr.q;
    ////////////////////////////////////////////////
    //// mode: 1 => use the automated test_cases //////////
    if (mode.q) {
      //// pinout output ////
      a = test_cases.values[0];
      b = test_cases.values[1];
      c = test_cases.values[2];
      //// adder_fsm input ////
      adder_fsm.a = test_cases.values[0];
      adder_fsm.b = test_cases.values[1];
      adder_fsm.c = test_cases.values[2];
    }
    //// mode: 0 => manually toggle the group 1 switch ////
    else {
      //// pinout output ////
      a = io_dip[0][0];
      b = io_dip[0][1];
      c = io_dip[0][2];
      //// adder_fsm input ////
      adder_fsm.a = io_dip[0][0];
      adder_fsm.b = io_dip[0][1];
      adder_fsm.c = io_dip[0][2];  
    }
    ///////////////////////////////////////////////////////

    //// Provide actual and raw data for adder_fsm checker ////
    adder_fsm.raw = c{raw_cout.out, raw_sum.out};
    if (mode.q) {
      adder_fsm.expect = test_cases.values[4:3];
    } else {
      if ((io_dip[0][0] + io_dip[0][1] + io_dip[0][2]) == 3) {
        adder_fsm.expect = 2b11;
        io_led[1][7] = 1b1;
      } else if ((io_dip[0][0] + io_dip[0][1] + io_dip[0][2]) == 2) {
        adder_fsm.expect = 2b10;
        io_led[1][6] = 1b1;
      } else if ((io_dip[0][0] + io_dip[0][1] + io_dip[0][2]) == 1) {
        adder_fsm.expect = 2b01;
        io_led[1][5] = 1b1;
      } else {
        adder_fsm.expect = 2b00;
        io_led[1][4] = 1b1;
      }
    }
    //////////////////////////////////////////////////////////

    //// Display the adder_fsm checker result ////
    seg.status = adder_fsm.pass;
    //////////////////////////////////////////////
    
    //// Display out comparison (FAIL) ////
    if (~adder_fsm.pass) {
      // group 1 LED: inputs for the full bit adder
      io_led[0] = adder_fsm.input_ref;
      
      // group 2 LED: expected output
      io_led[1] = adder_fsm.ans_ref;
      
      // group 3 LED: actual output
      io_led[2] = adder_fsm.err_ref;
    }
    else {
      // if everthing pass, NO LED
      io_led = 3x{{8h00}};
    }
    ///////////////////////////////////////
    
    if (adder_fsm.pass == 2b00) {
      seg.status = adder_fsm.pass; 
    } else {
      if (mode.q) {
        if (ctr.q <= 7) {
          ctr.d = ctr.q + 1;
          seg.status = 2b10;
        } else
          seg.status = adder_fsm.pass;
      } else {
        seg.status = adder_fsm.pass;  
      }
        
      
    }
    io_seg = ~seg.seg;
    io_sel = ~seg.sel;    
  }
}