module adder_fsm (
    input clk,         // clock
    input rst,         // reset
    input a,
    input b,
    input raw_s,
    input raw_c,
    output cin,
    output result[1],   // result of FSM: 1 for PASS, 0 for FAIL
    output status
  ) {
  .clk(clk) {
    .rst(rst) {
      fsm state = {IDLE, C0, C1, CS, FAIL};
      dff c[1];
    }
  }
  
  const IDLE = 2b00;
  const C0 = 2b01;
  const C1 = 2b10;
  const CS = 2b11;

  always {

    // Set the default values
    c.d = 0;
    result = 1b1;
    status = 3b0;

    case (state.q) {
      state.IDLE:
        status = 3b100;
        if (a && b)
          if (raw_s == C1[0] && raw_c == C1[1]) {
            state.d = state.C1;
            c.d = 1;
          }
          else
            state.d = state.FAIL;
        if (a || b)
          if (raw_s == C0[0] && raw_c == C0[1])
            state.d = state.C0;
          else
            state.d = state.FAIL;
        else
          if (raw_s != IDLE[0] || raw_c != IDLE[1])
            state.d = state.FAIL;

      state.C0:
        status = 3b011;
        if (a && b)
          if (raw_s == C1[0] && raw_c == C1[1]) {
            state.d = state.C1;
            c.d = 1;
          }
          else
            state.d = state.FAIL;
        if (a || b)
          if (raw_s != C0[0] || raw_c != C0[1])
            state.d =  state.FAIL;
        else
          if (raw_s == IDLE[0] && raw_c == IDLE[1])
            state.d = state.IDLE;
          else
            state.d = state.FAIL;

      state.C1:
        status = 3b010;
        // Check if the state change
        if (~a && ~b)
          if (raw_s == C0[0] && raw_c == C0[1]) {
            state.d = state.C0;
            c.d = 0;
          }
          else
            state.d = state.FAIL;
        
        // Check is the raw_c valid
        if (raw_c != C1[0])
          state.d = state.FAIL;

        c.d = 1;
        if (a && b)
          if (raw_s == CS[0])
            state.d = state.CS;
          else
            state.d = state.FAIL;
        if (a || b)
          if (raw_s != C1[0])
            state.d = state.FAIL;

      state.CS:
      status = 3001;
        if (~a && ~b) {
          if (raw_s == C0[0] && raw_c == C0[1]) {
            state.d = state.C0;
            c.d = 0;
          }
          else
            state.d = state.FAIL; 
        }
        
        // Check is the raw_c valid
        if (raw_c != C1[0])
          state.d = state.FAIL;

        if (a || b)
          if (raw_s == C1[0]) {
            state.d = state.C1;
            c.d = 1;
          }
        if (a && b)
          if (raw_s != CS[0])
            state.d = state.FAIL;
      
      state.FAIL:
        status = 3b000;
        result = 1b0;
        if (rst)
          state.d = state.IDLE;    
    }
    cin = c.q;

  }
}
