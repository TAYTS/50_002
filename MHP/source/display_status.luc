module display_status #(
    CHARS = 4 : CHARS > 0, // set the no. of characters
    DIV = 16 : DIV >= 0    // control the switching speed of characters
  )(
    input clk,             // clock
    input rst,             // reset
    input mode[1],         // 1 for auto, 0 for manual
    input status[3],       // 1 for pass, 0 for fail(mode: 1)
                           // 4 for idle, 3 for c0, 2 for c1, 1 for cs, 0 for fail (mode: 0)
    output seg [7],        // LED segments
    output sel [CHARS]     // character selected
  ) {
  
  // number of bits required to store CHARS-1
  const CHARS_BITS = $clog2(CHARS);
  const DEF_OUT = 7b0;
  
  // iterate from 0 to CHARS-1 to diplay each character
  .clk(clk), .rst(rst) {
    counter ctr (#DIV(DIV), #SIZE(CHARS_BITS), #TOP(CHARS-1), #UP(1)); 
  }

  fail_str fail_dec;    // fail decoder 
  pass_str pass_dec;    // pass decoder
  c0 c0_dec;            // c0 state(0, 1) decoder
  c1 c1_dec;            // c1 state(1, 0) decoder
  cs cs_dec;            // cs state(1, 1) decoder
  idle_str idle_dec;    // idle state(0, 0) decoder
  decoder digit_dec (#WIDTH(CHARS_BITS));   // digit decoder
  
  always {

    // Set empty input for fail_dec and pass_dec
    fail_dec.char = 3b0;
    pass_dec.char = 3b0;
    c0_dec.char = 3b0;
    c1_dec.char = 3b0;
    cs_dec.char = 3b0;
    idle_dec.char = 3b0;

    if (mode) {
      case(status) {
        3b000:
          pass_dec.char = ctr.value;
          seg = pass_dec.segs;
        3b001:
          fail_dec.char = ctr.value;
          seg = fail_dec.segs;
        default:
          seg = DEF_OUT;
      }
    }
    else {
      case(status) {
        3b100:  // idle state
          idle_dec.char = ctr.value;
          seg = idle_dec.segs;
        3b011:  // c0 state
          c0_dec.char = ctr.value;
          seg = c0_dec.segs;
        3b010:  // c1 state
          c1_dec.char = ctr.value;
          seg = c1_dec.segs;
        3b001:  // cs state
          cs_dec.char = ctr.value;
          seg = cs_dec.segs;
        3b00:  // fail
          fail_dec.char = ctr.value;
          seg = fail_dec.segs; 
        default:
          seg = DEF_OUT;
      }  
    }

    digit_dec.in = ctr.value;
    sel = digit_dec.out;
  }
}
