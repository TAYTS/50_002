module alu16 (
    input a[16],      // Input signal A
    input b[16],      // Input signal B
    input alufn[6],   // Input signal for ALUFN
    output out[16],   // Output signal of the ALU
    output z[1],      // Output signal z(adder) - Output all 0
    output v[1],      // Output signal v(adder) - Output overflow
    output n[1],      // Output signal n(adder) - Negative output
    output invalid[1] // Invalid ALUFN flag
  ) {

  // Initialise all the submodules //
  // ADD/SUB
  addmod addmod;
  
  // BOOL
  boolean boole;
  
  // SHIFT
  shifter shifter;
  
  // CMP
  compare comp;
  
  // MULT
  multiply mul;
 
  always {
    
    // Connect the input for all the submodules //
    // ADD/SUB
    
    addmod.a = a;
    addmod.b = b;
    addmod.alufn = alufn[0];
    
    // BOOL
    boole.a = a;
    boole.b = b;
    boole.alufn = alufn[3:0];
    
    // SHIFT
    shifter.a = a;
    shifter.b = b[3:0];
    shifter.alufn = alufn[1:0];
    
    // CMP
    comp.alufn = alufn[2:1];
    comp.z = addmod.z;
    comp.v = addmod.v;
    comp.n = addmod.n;
    
    // MULT
    mul.a = a;
    mul.b = b;
    
    
    // Define the default output for z, v, n
    z = 1b0;
    v = 1b0;
    n = 1b0;
    
    // Define the default invalid flag to false
    invalid = 1b0;


    // Connect the output with the respective submodules based on the ALUFN //
    case(alufn) {
      6b000000:  // ADD
        out = addmod.out ; 
        z = addmod.z;
        v = addmod.v;
        n = addmod.n;
      6b000001:  // SUB
        out = addmod.out ; 
        z = addmod.z;
        v = addmod.v;
        n = addmod.n;
      6b000010:  // MUL
        out = mul.out;
      6b011000:  // AND (boolean)
        out = boole.out;        
      6b011110:  // OR (boolean)
        out = boole.out;
      6b010110:  // XOR (boolean)
        out = boole.out;
      6b011010:  // "A" (LDR) (boolean)
        out = boole.out;
      6b100000:  // SHL
        out = shifter.out;
      6b100001:  // SHR
        out = shifter.out;
      6b100011:  // SRA
        out = shifter.out;
      6b110011:  // CMPEQ comp
        out = comp.out;
      6b110101:  // CMPLT comp
        out = comp.out;
      6b110111:  // CMPLE comp
        out = comp.out;
      default:
        out = 0;
        invalid = 1b1;
    }
  }
}
